/*
Author: Amjad Yaseen
Email: ayaseen@redhat.com
Date: 2023-03-06
Modified: 2025-04-15

This file implements health checks for alert forwarding configuration. It:

- Verifies if alerts are being forwarded to external systems
- Examines Alertmanager configuration for external receivers
- Checks for proper alert routing rules
- Provides recommendations for comprehensive alert management
- Helps ensure critical alerts are properly delivered to operational teams

This check helps maintain proper notification channels for monitoring alerts generated by the cluster.
*/

package monitoring

import (
	"fmt"
	"strings"

	"github.com/ayaseen/health-check-runner/pkg/healthcheck"
	"github.com/ayaseen/health-check-runner/pkg/types"
	"github.com/ayaseen/health-check-runner/pkg/utils"
)

// AlertsForwardingCheck checks if alerts are being forwarded to external systems
type AlertsForwardingCheck struct {
	healthcheck.BaseCheck
}

// NewAlertsForwardingCheck creates a new alerts forwarding check
func NewAlertsForwardingCheck() *AlertsForwardingCheck {
	return &AlertsForwardingCheck{
		BaseCheck: healthcheck.NewBaseCheck(
			"alerts-forwarding",
			"Alerts Forwarding",
			"Checks if alerts are being forwarded to external systems",
			types.CategoryOpReady,
		),
	}
}

// Run executes the health check
func (c *AlertsForwardingCheck) Run() (healthcheck.Result, error) {
	// Get the alertmanager-main secret which contains the configuration
	out, err := utils.RunCommand("oc", "get", "secret", "alertmanager-main", "-n", "openshift-monitoring", "-o", "jsonpath={.data.alertmanager\\.yaml}", "|", "base64", "-d")
	if err != nil {
		return healthcheck.NewResult(
			c.ID(),
			types.StatusCritical,
			"Failed to get Alertmanager configuration",
			types.ResultKeyRequired,
		), fmt.Errorf("error getting Alertmanager configuration: %v", err)
	}

	// Get the OpenShift version for recommendations
	version, verErr := utils.GetOpenShiftMajorMinorVersion()
	if verErr != nil {
		version = "4.14" // Update to a more recent default version
	}

	// Look for external receiver configurations
	hasExternalReceivers := false
	var receiverTypes []string

	// Check for various receiver types
	if strings.Contains(out, "pagerduty_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "PagerDuty")
	}
	if strings.Contains(out, "slack_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "Slack")
	}
	if strings.Contains(out, "email_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "Email")
	}
	if strings.Contains(out, "webhook_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "Webhook")
	}
	if strings.Contains(out, "victorops_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "VictorOps")
	}
	if strings.Contains(out, "pushover_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "Pushover")
	}
	if strings.Contains(out, "opsgenie_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "OpsGenie")
	}
	if strings.Contains(out, "wechat_configs") {
		hasExternalReceivers = true
		receiverTypes = append(receiverTypes, "WeChat")
	}

	// Check if there are route configurations beyond default
	hasCustomRoutes := strings.Contains(out, "routes:") &&
		!strings.Contains(out, "routes:\n- receiver: default\n  group_by: ['alertname', 'namespace']")

	// If external receivers are configured, check is successful
	if hasExternalReceivers {
		result := healthcheck.NewResult(
			c.ID(),
			types.StatusOK,
			fmt.Sprintf("Alerts are being forwarded to external systems: %s", strings.Join(receiverTypes, ", ")),
			types.ResultKeyNoChange,
		)
		result.Detail = fmt.Sprintf("Alertmanager configuration:\n%s", out)
		return result, nil
	}

	// Otherwise, if there are custom routes but no external receivers, something might be misconfigured
	if hasCustomRoutes && !hasExternalReceivers {
		result := healthcheck.NewResult(
			c.ID(),
			types.StatusWarning,
			"Custom alert routes are configured but no external receivers found",
			types.ResultKeyRecommended,
		)
		result.AddRecommendation("Configure external receivers for your alert routes")
		result.AddRecommendation(fmt.Sprintf("Refer to https://access.redhat.com/documentation/en-us/openshift_container_platform/%s/html-single/monitoring/index#sending-notifications-to-external-systems_managing-alerts", version))
		result.Detail = fmt.Sprintf("Alertmanager configuration:\n%s", out)
		return result, nil
	}

	// No external receivers or custom routes configured
	result := healthcheck.NewResult(
		c.ID(),
		types.StatusWarning,
		"No external alert forwarding configured",
		types.ResultKeyRecommended,
	)
	result.AddRecommendation("Configure external receivers for alerts to ensure notifications are sent to the right teams")
	result.AddRecommendation(fmt.Sprintf("Refer to https://access.redhat.com/documentation/en-us/openshift_container_platform/%s/html-single/monitoring/index#sending-notifications-to-external-systems_managing-alerts", version))
	result.Detail = fmt.Sprintf("Alertmanager configuration:\n%s", out)
	return result, nil
}
